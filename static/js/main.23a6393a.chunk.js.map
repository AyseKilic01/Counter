{"version":3,"sources":["components/Counter.js","redux/actions/counterActions.js","redux/actions/actionTypes.js","components/DecreaseCounter.js","components/IncreaseByTwoCounter.js","components/IncreaseCounter.js","App.js","serviceWorker.js","redux/reducer/counterReducer.js","redux/reducer/index.js","index.js","redux/reducer/configureStore.js"],"names":["Counter","this","props","counter","Component","connect","state","counterReducer","increaseCounter","type","payload","descreaceCounter","increaseByTwoCounter","DecreaseCounter","onClick","e","dispatch","actions","bindActionCreators","IncreaseByTwoCounter","IncreaseCounter","Button","outline","color","App","Container","className","fluid","Row","Col","sm","md","size","offset","xs","Boolean","window","location","hostname","match","action","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAIMA,E,uKAEF,OACE,6BACI,4BAAKC,KAAKC,MAAMC,c,GAJJC,aAePC,mBALf,SAAyBC,GACrB,MAAO,CAAEH,QAASG,EAAMC,kBAIbF,CAAyBL,G,OCjB3BQ,EAAkB,iBAAO,CAClCC,KCH4B,mBDI5BC,QAAS,IAGAC,EAAmB,iBAAO,CACnCF,KCP4B,mBDQ5BC,QAAS,IAGAE,EAAuB,iBAAO,CACzCH,KCXqC,0BDYrCC,QAAS,IETLG,E,uKACM,IAAD,OACP,OACE,6BACE,4BACEC,QAAS,SAACC,GACR,EAAKb,MAAMc,SFJgB,CACnCP,KCP4B,mBDQ5BC,QAAS,MEAL,WADF,S,GAHwBN,aAkBfC,mBAHf,SAA4BW,GAC1B,MAAO,CAAEC,QAASC,YAAmBP,EAAkBK,MAE1CX,CAA4BQ,GCjBrCM,E,uKACM,IAAD,OACP,OACE,6BACE,4BACEL,QAAS,SAACC,GACR,EAAKb,MAAMc,SHAoB,CACzCP,KCXqC,0BDYrCC,QAAS,MGJH,sB,GAJ2BN,aAmBpBC,mBAHf,SAA4BW,GAC1B,MAAO,CAAEC,QAASC,YAAmBN,EAAsBI,MAE9CX,CAA4Bc,G,QClBrCC,E,uKACM,IAAD,OACP,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,SAAO,EAACC,MAAM,UACpBT,QAAS,SAACC,GACR,EAAKb,MAAMc,SJXe,CAClCP,KCH4B,mBDI5BC,QAAS,MIOL,sB,GAJsBN,aAmBfC,mBAHf,SAA4BW,GAC1B,MAAO,CAAEC,QAASC,YAAmBV,EAAiBQ,MAEzCX,CAA4Be,G,wBCQ5BI,MA3Bf,WACE,OACE,6BACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,mBAAmBC,MAAM,MAC5C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACjC,IACD,kBAAC,EAAD,MAAY,MAGhB,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKK,GAAG,IAAIJ,GAAG,KACb,kBAAC,EAAD,OAEF,kBAACD,EAAA,EAAD,CAAKK,GAAG,IAAIJ,GAAG,KACb,kBAAC,EAAD,OAEF,kBAACD,EAAA,EAAD,CAAKC,GAAG,KACL,IACD,kBAAC,EAAD,WCdQK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBN,IAkBehC,EAlBQ,WAAqB,IAApBD,EAAmB,uDAAb,EAAGkC,EAAU,uCAEvC,OAAQA,EAAO/B,MACX,INLwB,mBMQxB,INN+B,0BMO3B,OAAgBH,EAAMkC,EAAO9B,QAEjC,INVwB,mBMWpB,OAAgBJ,EAAMkC,EAAO9B,QAEjC,QACI,OAAOJ,ICNJmC,EALEC,YAAgB,CAC7BnC,mBCGJ,IAAMoC,ECHKC,YAAYH,GDKvBI,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEFI,SAASC,eAAe,SHqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.23a6393a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n//zaten sayfanın sonunda export default işlemini yapacağın için classının başına koymana gerek yok\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div> \r\n          <h1>{this.props.counter}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { counter: state.counterReducer}\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps)(Counter);","import * as ActionTypes from './actionTypes'\r\n\r\nexport const increaseCounter = () => ({\r\n    type: ActionTypes.INCREASE_COUNTER,\r\n    payload: 1\r\n})\r\n\r\nexport const descreaceCounter = () => ({\r\n    type: ActionTypes.DECREASE_COUNTER,\r\n    payload: 1\r\n})\r\n\r\nexport const increaseByTwoCounter = () => ({\r\n  type: ActionTypes.INCREASE_BY_TWO_COUNTER,\r\n  payload: 2\r\n})","export const INCREASE_COUNTER = \"INCREASE_COUNTER\"\r\nexport const DECREASE_COUNTER = \"DECREASE_COUNTER\"\r\nexport const INCREASE_BY_TWO_COUNTER = \"INCREASE_BY_TWO_COUNTER\"","import React, { Component } from 'react';\r\nimport { bindActionCreators } from \"redux\";\r\nimport { descreaceCounter } from \"../redux/actions/counterActions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass DecreaseCounter extends Component {\r\n  render() {\r\n    return (\r\n      <div> \r\n        <button\r\n          onClick={(e) => {\r\n            this.props.dispatch(descreaceCounter());\r\n          }}\r\n        >\r\n          1 azalt\r\n        </button> </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return { actions: bindActionCreators(descreaceCounter, dispatch) };\r\n}\r\nexport default connect(mapDispatchToProps)(DecreaseCounter);\r\n","import React, { Component } from 'react';\r\nimport { bindActionCreators } from \"redux\";\r\nimport { increaseByTwoCounter } from \"../redux/actions/counterActions\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nclass IncreaseByTwoCounter extends Component {\r\n  render() {\r\n    return (\r\n      <div> \r\n        <button\r\n          onClick={(e) => {\r\n            this.props.dispatch(increaseByTwoCounter());\r\n          }}\r\n        >\r\n          2 arttır\r\n        </button>\r\n         </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return { actions: bindActionCreators(increaseByTwoCounter, dispatch) };\r\n}\r\nexport default connect(mapDispatchToProps)(IncreaseByTwoCounter);\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { increaseCounter } from \"../redux/actions/counterActions\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nclass IncreaseCounter extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button outline color=\"primary\"\r\n          onClick={(e) => {\r\n            this.props.dispatch(increaseCounter());\r\n          }}\r\n        >\r\n          1 arttır\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return { actions: bindActionCreators(increaseCounter, dispatch) };\r\n}\r\nexport default connect(mapDispatchToProps)(IncreaseCounter);\r\n","import React from \"react\";\nimport Counter from \"./components/Counter\";\nimport DecreaseCounter from \"./components/DecreaseCounter\";\nimport IncreaseByTwoCounter from \"./components/IncreaseByTwoCounter\";\nimport IncreaseCounter from \"./components/IncreaseCounter\";\nimport { Col, Container, Row } from \"reactstrap\";\n\nfunction App() {\n  return (\n    <div>\n      <Container className=\"themed-container\" fluid=\"md\">\n        <Row>\n          <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n            {\" \"}\n            <Counter />{\" \"}\n          </Col>\n        </Row>\n        <Row>\n          <Col xs=\"6\" sm=\"4\">\n            <IncreaseCounter />\n          </Col>\n          <Col xs=\"6\" sm=\"4\">\n            <DecreaseCounter />\n          </Col>\n          <Col sm=\"4\">\n            {\" \"}\n            <IncreaseByTwoCounter />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as ActionTypes from '../actions/actionTypes'\r\n\r\nconst counterReducer = (state=0, action) =>{\r\n    let newState;\r\n    switch (action.type) {\r\n        case ActionTypes.INCREASE_COUNTER:\r\n            return newState=state+action.payload;\r\n          \r\n        case ActionTypes.INCREASE_BY_TWO_COUNTER:\r\n            return newState=state+action.payload;\r\n            \r\n        case ActionTypes.DECREASE_COUNTER:\r\n            return newState=state-action.payload;\r\n          \r\n        default:\r\n            return state;\r\n           \r\n    }\r\n};\r\n\r\nexport default counterReducer;","import {combineReducers} from \"redux\";\r\nimport counterReducer from \"./counterReducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    counterReducer\r\n});\r\n\r\n\r\nexport default reducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './redux/reducer/configureStore';\nimport {Provider} from 'react-redux';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {createStore} from 'redux';\r\nimport reducers from './index'; \r\n//state veritabanı gibi düşün\r\n\r\nexport default function configureStore(){\r\n    return createStore(reducers);\r\n}"],"sourceRoot":""}